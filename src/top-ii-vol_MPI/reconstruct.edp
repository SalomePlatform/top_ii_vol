load "PETSc"
func Pk = P1;
macro grad(u)[dx(u), dy(u), dz(u)]// // three-dimensional gradient

macro def(u)u//
{
    macro dimension()3// EOM
    include "macro_ddm.idp"
    mesh3 Th;

    real t0;
	mpiBarrier(mpiCommWorld);
    if(mpirank == 0) t0 = mpiWtime();

    Th=readmesh3("Top2Vol-mesh_"+mpirank+".mesh");

    reconstructDmesh(Th)

	mpiBarrier(mpiCommWorld);
    if(mpirank == 0)
    cout <<  "  Total time taken for Dmesh reconstruction : " << mpiWtime()-t0 << " s"<< endl;

    fespace Wh(Th, Pk);
    Wh<real> u;

    Mat A;
    createMat(Th, A, Pk)

    varf vPb(u, v) = intN(Th)(grad(u)' * grad(v)) /*+ intN(Th)(1e6*(x<.6)*(x>.4)*x*y*v)*/ + on(6, u = 15.0)+ on(3, u = 1.0);
    real[int] rhs = vPb(0, Wh);

    set(A, sparams = "-ksp_view");
    A = vPb(Wh, Wh);
    u[] = A^-1 * rhs; 

    plotMPI(Th, u, Pk, def, real, cmm = "u"); 
    int[int] fforder=[1];
    savevtk("vtk.vtu",Th,u,order=fforder, dataname = "u");

}
